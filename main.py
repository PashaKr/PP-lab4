import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = '7589269344:AAEUzX5hEIrbAhRzmHRCxd9BbRh2sVGyncA'
GENIUS_TOKEN = 'p-TsfUhykYaoW4Owag-bMdTRZpwaIiNUI2blBQLAwmbarcFGlO9AxMx4C2Pg_Y__'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏ –Ω–∞ Genius
def search_song(song_name: str) -> dict:
    base_url = "https://api.genius.com"
    headers = {"Authorization": f"Bearer {GENIUS_TOKEN}"}
    search_url = f"{base_url}/search"
    params = {"q": song_name}

    response = requests.get(search_url, headers=headers, params=params)
    if response.status_code != 200:
        raise Exception("Genius API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    data = response.json()
    if not data['response']['hits']:
        return None

    song = data['response']['hits'][0]['result']
    song_id = song['id']
    song_info = {
        "title": song["title"],
        "artist": song["primary_artist"]["name"],
        "url": song["url"]
    }

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø–µ—Å–Ω–µ —á–µ—Ä–µ–∑ API
    song_details = get_song_details_via_api(song_id)
    song_info.update(song_details)

    return song_info


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ API
def get_song_details_via_api(song_id: int) -> dict:
    base_url = f"https://api.genius.com/songs/{song_id}"
    headers = {"Authorization": f"Bearer {GENIUS_TOKEN}"}

    response = requests.get(base_url, headers=headers)
    if response.status_code != 200:
        raise Exception("Genius API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    data = response.json()
    song_data = data['response']['song']

    return {
        "release_date": song_data.get("release_date", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    song_name = update.message.text
    try:
        # –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ Genius API
        song_info = search_song(song_name)
        if not song_info:
            await update.message.reply_text("–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Å–Ω–µ
        reply = (
            f"üéµ –ù–∞–∑–≤–∞–Ω–∏–µ: {song_info['title']}\n"
            f"üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {song_info['artist']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {song_info['release_date']}\n"
            f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {song_info['url']}"
        )
        await update.message.reply_text(reply)

    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == "__main__":
    main()
